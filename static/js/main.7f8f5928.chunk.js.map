{"version":3,"sources":["component/Square.js","component/Board.js","component/Game.js","index.js"],"names":["Square","x","y","value","onClick","winnerCells","style","forEach","element","className","Board","square","Array","from","length","keys","map","row","col","Setting","isPlaying","onAcceptClick","useState","setRow","setCol","err","setErr","type","min","placeholder","disabled","onChange","e","parseInt","target","name","Game","xy","setXY","setIsPlaying","ascending","setAscending","isNext","setIsNext","squares","fill","history","setHistory","step","setStep","setSquare","moves","setMoves","setWinnerCells","continueCell","setCntCell","onSquareClick","newHistory","slice","current","JSON","parse","stringify","_winnerCells","currentVal","winCells","coorX","coorY","push","cntInCol","cntInRow","cntMainDiagonal","cntSkewDiagonal","checkWin","_history","concat","jumpTo","move","useEffect","_moves","_","desc","reStart","status","history_","size","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.7f8f5928.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\n/**\r\n * draw the square and high light the winning square\r\n * @param x current position x\r\n * @param y current position y\r\n * @param value X or O\r\n * @param onClick click action at current square\r\n * @param winnerCells winning position\r\n */\r\nfunction Square({ x, y, value, onClick, winnerCells }) {\r\n    const onSquareClick = () => { onClick(x, y); };\r\n  \r\n    // set style normal or won\r\n    let style = \"square\"\r\n    if (value==='O'){ style = \"square positionO\" }\r\n\r\n    winnerCells.forEach(element => {\r\n      if(element[0] === x && element[1] === y && value==='X'){ style = \"square won\" }\r\n      else\r\n      if(element[0] === x && element[1] === y && value==='O'){ style = \"square wonO\" }\r\n    });\r\n  \r\n    return (\r\n      <div className={style} onClick={onSquareClick}>\r\n        {value}\r\n      </div>\r\n    );\r\n  };\r\n\r\nexport default Square;","import React from \"react\";\r\nimport Square from \"./Square\";\r\n\r\n/**\r\n * draw the board \r\n * @param square current position\r\n * @param winnerCells winning position\r\n * @param onClick click action at current square\r\n * @returns \r\n */\r\nfunction Board({ square, winnerCells, onClick }) {\r\n    return (\r\n      <div className=\"board-row\">\r\n        {Array.from(Array(square.length).keys()).map((row) =>\r\n          <div >\r\n            {Array.from(Array(square[0].length).keys()).map((col) => \r\n            <Square \r\n              x={row}\r\n              y={col}\r\n              value={square[row][col] === 0 ? \"\" : square[row][col]} \r\n              onClick={(x, y) => onClick(x, y)} \r\n              winnerCells={winnerCells} />\r\n            )}\r\n          </div>)\r\n        }\r\n      </div>\r\n    );\r\n  };\r\n\r\nexport default Board;","import React, { useState, useEffect } from \"react\";\r\nimport \"./App.css\"\r\nimport Board from \"./Board\";\r\n\r\n/**\r\n * @param isPlaying disable control panel\r\n * @param onAcceptClick condition check number of rows, number of columns\r\n * @returns set size for the board\r\n */\r\nfunction Setting({isPlaying, onAcceptClick}) {\r\n  const [row, setRow] = useState(5);\r\n  const [col, setCol] = useState(5);\r\n  const [err, setErr] = useState(\"\"); \r\n  /**\r\n   * @returns set size for the board\r\n   */\r\n  function onAcceptClickSetting() {\r\n    if (isPlaying) return;\r\n    if (row < 5) { return setErr(\"The row number must be > 5\") }\r\n    if (col < 5) { return setErr(\"The column number must be > 5\") }\r\n    onAcceptClick(row, col);\r\n    setErr(\"\")\r\n  }\r\n\r\n  return (\r\n    <div className=\"game-setting\">\r\n      <p className=\"game-setting__title\">Game Setting</p>\r\n      <input type=\"number\" min=\"5\" placeholder=\"Input row number\" className=\"input_form\"\r\n        value={row}\r\n        disabled = {isPlaying}\r\n        onChange={(e) => setRow(parseInt(e.target.value))}/>\r\n      <input type=\"number\" min=\"5\" placeholder=\"Input column number\" className=\"input_form\"\r\n        value={col}\r\n        name=\"col\"\r\n        disabled = {isPlaying}\r\n        onChange={(e) => setCol(parseInt(e.target.value))}/>\r\n      {err && <p>{err}</p>}\r\n      <button onClick={onAcceptClickSetting} className=\"btn\">Apply setting</button>  \r\n    </div>\r\n  )\r\n}\r\n\r\nfunction Game() {\r\n  const [xy, setXY] = useState({x: 5, y: 5}); // original size\r\n  const [isPlaying, setIsPlaying] = useState(false); // đang chơi game\r\n  const [ascending, setAscending] = useState(false); // sort increasing\r\n\r\n  const [isNext, setIsNext] = useState(true); // giá trị next tiếp là X hoặc O\r\n\r\n  const [history, setHistory] = useState([\r\n    {\r\n      squares: Array(xy.x).fill().map(() => Array(xy.y).fill(0)),\r\n      x: null,\r\n      y: null\r\n    },\r\n  ]);\r\n  const [step, setStep] = useState(0); // bước số\r\n  const [square, setSquare] = useState(history[step].squares); // mảng ô hiện tại hiển thị\r\n\r\n  const [moves, setMoves] = useState([]); // di duyển lịch sử đến\r\n  const [winnerCells, setWinnerCells] = useState([]); // các ô thắng\r\n  const [continueCell, setCntCell] = useState(0); // thứ tự ô kế tiếp\r\n\r\n  function onSquareClick(x, y) {\r\n    if (winnerCells.length === 5) return; // win at 5 points\r\n    if (!isPlaying) setIsPlaying(true);\r\n\r\n    const newHistory = history.slice(0, step + 1);\r\n    const current = newHistory[newHistory.length - 1];\r\n    const squares = JSON.parse(JSON.stringify(current.squares)); // array 2d not working with slice()\r\n\r\n    if (squares[x][y] !== 0) return;\r\n\r\n    setCntCell(continueCell + 1);\r\n    squares[x][y] = isNext ? \"X\" : \"O\";\r\n    const _winnerCells = checkWin(x, y, squares[x][y]);\r\n    if (_winnerCells) {\r\n      setWinnerCells(_winnerCells);\r\n    }\r\n\r\n    const _history = newHistory.concat([\r\n      {\r\n        squares, x, y,\r\n      },\r\n    ]);\r\n\r\n    setSquare(squares);\r\n\r\n    setHistory(_history);\r\n    setStep(step + 1);\r\n    setIsNext(!isNext);\r\n  };\r\n\r\n  function jumpTo(move) {\r\n    setSquare(history[move].squares);\r\n    setStep(move);\r\n    setIsNext(move % 2 === 0);\r\n  };\r\n\r\n  function reStart(move) {\r\n    jumpTo(move);\r\n    setWinnerCells([]);\r\n  };\r\n\r\n  useEffect(() => {\r\n    const _moves = history.map((_, move) => {\r\n      if (ascending) { move = history.length - 1 - move; }\r\n\r\n      const desc = move\r\n        ? `Move #${move} - (${history[move].x},${history[move].y})`\r\n        : \"Game start\";\r\n        if (!move) {\r\n          return (\r\n            <li key={move}>\r\n              <button onClick={() => reStart(move)}>\r\n                {step ? desc : <b> {desc} </b>}\r\n              </button>\r\n            </li>\r\n          );\r\n        }\r\n        return (\r\n          <li key={move}>\r\n            <button onClick={() => jumpTo(move)}>\r\n              {move === step ? <b> {desc} </b> : desc}\r\n            </button>\r\n          </li>\r\n        );\r\n    });\r\n\r\n    setMoves(_moves);\r\n  }, [step, ascending]);\r\n\r\n  const status = continueCell === xy.x * xy.y\r\n      ? \"Draw Game\"\r\n      : winnerCells.length === 5\r\n        ? \"The winner is: \" + square[winnerCells[0][0]][winnerCells[0][1]]\r\n        : \"Next player: \" + (isNext ? \"X\" : \"O\");\r\n\r\n  function onAcceptClick(row, col) {\r\n    const history_ = [\r\n      {\r\n        squares: Array(parseInt(row))\r\n          .fill()\r\n          .map(() => Array(parseInt(col)).fill(0)),\r\n        x: null,\r\n        y: null,\r\n      },\r\n    ];\r\n    setXY({x: parseInt(row), y: parseInt(col)})\r\n    setSquare(history_[0].squares);\r\n    setHistory(history_);\r\n  };\r\n\r\n  /**\r\n   * \r\n   * @param {*} x current position x\r\n   * @param {*} y current position y\r\n   * @param {*} currentVal current position [x,y]\r\n   * @returns \r\n   */\r\n  function checkWin(x, y, currentVal) {\r\n    const current = history[step];\r\n    const squares = current.squares.slice();\r\n    let winCells = [];\r\n\r\n    let coorX = x;\r\n    let coorY = y;\r\n    winCells.push([x, y]);\r\n\r\n    // check col\r\n    let cntInCol = 1;\r\n    coorX = x - 1;\r\n    while (coorX >= 0 && squares[coorX][coorY] === currentVal) {\r\n      winCells.push([coorX, coorY]);\r\n      cntInCol++;\r\n      coorX--;\r\n    }\r\n\r\n    coorX = x + 1;\r\n    while (coorX < xy.x && squares[coorX][coorY] === currentVal) {\r\n      winCells.push([coorX, coorY]);\r\n      cntInCol++;\r\n      coorX++;\r\n    }\r\n    if (cntInCol >= 5) {\r\n      return winCells;\r\n    }\r\n\r\n    // check row\r\n    winCells = [];\r\n    winCells.push([x, y]);\r\n    let cntInRow = 1;\r\n    coorX = x;\r\n    coorY = y - 1;\r\n    while (coorY >= 0 && squares[coorX][coorY] === currentVal) {\r\n      winCells.push([coorX, coorY]);\r\n      cntInRow++;\r\n      coorY--;\r\n    }\r\n\r\n    coorY = y + 1;\r\n    while (coorX < xy.y && squares[coorX][coorY] === currentVal) {\r\n      winCells.push([coorX, coorY]);\r\n      cntInRow++;\r\n      coorY++;\r\n    }\r\n    if (cntInRow >= 5) {\r\n      return winCells;\r\n    }\r\n\r\n    // check main diagonal\r\n    winCells = [];\r\n    winCells.push([x, y]);\r\n    let cntMainDiagonal = 1;\r\n    coorY = y - 1;\r\n    coorX = x - 1;\r\n    while (coorY >= 0 && coorX >= 0 && squares[coorX][coorY] === currentVal) {\r\n      winCells.push([coorX, coorY]);\r\n      cntMainDiagonal++;\r\n      coorY--;\r\n      coorX--;\r\n    }\r\n\r\n    coorX = x + 1;\r\n    coorY = y + 1;\r\n    while (coorX < xy.x && coorY < xy.y && squares[coorX][coorY] === currentVal) {\r\n      cntMainDiagonal++;\r\n      winCells.push([coorX, coorY]);\r\n      coorX++;\r\n      coorY++;\r\n    }\r\n    if (cntMainDiagonal >= 5) {\r\n      return winCells;\r\n    }\r\n\r\n    // check skew diagonal\r\n    winCells = [];\r\n    winCells.push([x, y]);\r\n    let cntSkewDiagonal = 1;\r\n    coorX = x - 1;\r\n    coorY = y + 1;\r\n    while (coorY < xy.y && coorX >= 0 && squares[coorX][coorY] === currentVal) {\r\n      cntSkewDiagonal++;\r\n      winCells.push([coorX, coorY]);\r\n      coorY++;\r\n      coorX--;\r\n    }\r\n\r\n    coorX = x + 1;\r\n    coorY = y - 1;\r\n    while (coorX < xy.x && coorY >= 0 && squares[coorX][coorY] === currentVal) {\r\n      cntSkewDiagonal++;\r\n      winCells.push([coorX, coorY]);\r\n      coorX++;\r\n      coorY--;\r\n    }\r\n    if (cntSkewDiagonal >= 5) {\r\n      return winCells;\r\n    }\r\n\r\n    return false;\r\n  };\r\n\r\n  return (\r\n    <div className=\"game\">\r\n      <div className=\"game-info\">\r\n        <Setting \r\n          isPlaying = {isPlaying}\r\n          onAcceptClick = {onAcceptClick} \r\n          ascending ={ascending}\r\n          setAscending={setAscending}\r\n        /> \r\n  \r\n      <Board\r\n        square={square}\r\n        size={xy}\r\n        winnerCells={winnerCells}\r\n        onClick={(x, y) => { onSquareClick(x, y); }}\r\n      />\r\n\r\n        <div className=\"game-status\">\r\n          <p className=\"game-status__title\">{status}</p>\r\n          <div>{moves}</div>\r\n          <button onClick={()=>{ setAscending(!ascending); }} className=\"btn\" >\r\n            {ascending ? \"Sort ascending\" : \"Sort descending\"}\r\n          </button>\r\n        </div>\r\n        \r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Game;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport Game from './component/Game';\r\n\r\n// ========================================\r\n\r\nReactDOM.render(\r\n  <Game />,\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}